.\"
.\" Copyright (c) 2011 Hunter Matthews <hunter@unix.haus>
.\"
.\" SPDX-License-Identifier: Apache-2.0
.\"
.\" bectl.8 has an excellent mdoc formatted man page...
.\"
.Dd Jan 6, 2011
.Dt CLU 1
.Os Unix
.\" ---------------------------------------------------------------------------
.Sh NAME
.Nm clu
.Nd Describes various interesting aspects (facts) about the current system.
.\" ---------------------------------------------------------------------------
.Sh SYNOPSIS
.Nm
.Op Fl -help | -version | -debug
.Nm
.Cm archive
.Nm
.Cm report
.Op Fl 1 | Fl -2 | Fl 3
.Op Fl -verbose
.Op Fl -net
.Op Fl -output Brq Ar dots | Ar shell | Ar json
.Nm
.Cm requires
.Brq Ar list | Ar check
.\" ---------------------------------------------------------------------------
.Sh DESCRIPTION
.Nm
is a tool for reporting various facts about a system. It reads well known system files and runs
programs to collect the information. It was created because other tools in this category (and there are
.Em many )
either tried to report too much (overwhelming a busy sysadmin) or far too little (causing the sysadmin
to have to run other commands for a complete picture).
It is therefore strongly opinionated - what it outputs and how that is formatted
are pretty much at the opinion of the author.
.\" ---------------------------------------------------------------------------
.Sh OPTIONS
The following global options are supported. Individual commands may have their own specific options.
.Bl -tag
.It Cm --help -h
List the help screen for the command.
.It Cm --version
Print the version of the command.
.It Cm --verbose -v
Run in verbose mode.
.El
.\" ---------------------------------------------------------------------------
.Sh COMMANDS
.Bl -tag -width indent
.\" ------------------------------------
.It Xo
.Cm archive
.Xc
Create a compressed
.Xr tar 1
archive of all the required file and program outputs used by
.Nm .
This facilitates both testing and debugging without needing to be fully networked all the time or
remote debugging. The archive will be named /tmp/clu_<hostname>.tgz.
.\" ------------------------------------
.It Xo
.Cm report
.Op Fl 1 | Fl -2 | Fl 3
.Op Fl -verbose
.Op Fl -net
.Op Fl -output Brq Ar dots | Ar shell | Ar json
.Xc
Report various facts about the computer. This includes details of the OS, hardware (virtual
or physical), networking, etc.
.Pp
The
.Op Fl 1 | 2 | 3
controls tier of facts (more and more details at higher / larger number tiers...) are printed.
.Pp
The
.Op Fl -verbose
flag can change the formatting of certain facts (networking only at present).
.Pp
The
.Op Fl -net
enables network access for any facts - without this flag, only the local system itself is queried.
.Pp
Output is controlled with the
.Op Fl -output
flag and a single required argument of
.Brq Ar dots | Ar shell | Ar json
with the default being dots.
.\" ------------------------------------
.It Cm requires Brq Ar check | list
List or check the required files, programs and api's required for the program to run.
.El
.\" ---------------------------------------------------------------------------
.Sh HISTORY
clu is the 4th or 5th incarnation of this idea, going back to 2011. I finally gave up on 2 different
incarnations of shell script. The deployment is easier but the programming is AWFUL. Pure
python zipapps solve the deployment problem (mostly).
(I wish Python had the same deployment model of Go...) Names have varied considerably over the
years. Earlier incarnations strongly influenced the `archive` command and being able to
test the parsers without being logged in to networked systems.
.\" ---------------------------------------------------------------------------
.Sh AUTHORS
.An Hunter Matthews Aq Mt hunter@unix.haus
is to blame on this one.
